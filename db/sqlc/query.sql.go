// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const insertComment = `-- name: InsertComment :exec
insert into "comments" (Comment_post_id,CommentedUser,CommentTime,CommentDescription) values ($1,$2,$3,$4)
`

type InsertCommentParams struct {
	CommentPostID      sql.NullInt32  `json:"comment_post_id"`
	Commenteduser      sql.NullString `json:"commenteduser"`
	Commenttime        sql.NullString `json:"commenttime"`
	Commentdescription sql.NullString `json:"commentdescription"`
}

func (q *Queries) InsertComment(ctx context.Context, arg InsertCommentParams) error {
	_, err := q.exec(ctx, q.insertCommentStmt, insertComment,
		arg.CommentPostID,
		arg.Commenteduser,
		arg.Commenttime,
		arg.Commentdescription,
	)
	return err
}

const insertPost = `-- name: InsertPost :exec
INSERT INTO post (Title,UserName,Description,PostTime) values($1,$2,$3,$4)
`

type InsertPostParams struct {
	Title       sql.NullString `json:"title"`
	Username    sql.NullString `json:"username"`
	Description sql.NullString `json:"description"`
	Posttime    sql.NullString `json:"posttime"`
}

func (q *Queries) InsertPost(ctx context.Context, arg InsertPostParams) error {
	_, err := q.exec(ctx, q.insertPostStmt, insertPost,
		arg.Title,
		arg.Username,
		arg.Description,
		arg.Posttime,
	)
	return err
}

const queryGetAllPost = `-- name: QueryGetAllPost :many
SELECT postid, username, title, description, posttime FROM post
`

func (q *Queries) QueryGetAllPost(ctx context.Context) ([]Post, error) {
	rows, err := q.query(ctx, q.queryGetAllPostStmt, queryGetAllPost)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.Postid,
			&i.Username,
			&i.Title,
			&i.Description,
			&i.Posttime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryGetCommentById = `-- name: QueryGetCommentById :many
SELECT commentid, comment_post_id, commenteduser, commenttime, commentdescription FROM "comments" where Comment_post_id = $1
`

func (q *Queries) QueryGetCommentById(ctx context.Context, commentPostID sql.NullInt32) ([]Comment, error) {
	rows, err := q.query(ctx, q.queryGetCommentByIdStmt, queryGetCommentById, commentPostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.Commentid,
			&i.CommentPostID,
			&i.Commenteduser,
			&i.Commenttime,
			&i.Commentdescription,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryGetPostById = `-- name: QueryGetPostById :one
SELECT postid, username, title, description, posttime FROM "post" where PostID = $1
`

func (q *Queries) QueryGetPostById(ctx context.Context, postid int32) (Post, error) {
	row := q.queryRow(ctx, q.queryGetPostByIdStmt, queryGetPostById, postid)
	var i Post
	err := row.Scan(
		&i.Postid,
		&i.Username,
		&i.Title,
		&i.Description,
		&i.Posttime,
	)
	return i, err
}
